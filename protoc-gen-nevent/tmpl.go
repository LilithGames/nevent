package main

const tmpl = `// This code was autogenerated from nevent, do not edit.
package {{ package . }}

import (
	"context"
	"fmt"

	"github.com/nats-io/nats.go"
	"github.com/golang/protobuf/proto"
	"github.com/LilithGames/nevent"
	pb "github.com/LilithGames/nevent/proto"
)
{{- $foptions := options . }}
{{- $fsubject := default $foptions.Subject (package .) }}
{{- range .Services }}
{{- $svc := .Name }}
{{- $soptions := options . }}
{{- $ssubject := default $soptions.Subject $svc }}
{{- $bsubject := printf "%s.%s" $fsubject $ssubject }}

type {{ $svc }}Client struct{
	nc *nevent.Client
}

func New{{ $svc }}Client(nc *nevent.Client) *{{ $svc }}Client{
	return &{{ $svc }}Client{nc: nc}
}
{{- range .Methods }}
{{- $oname := name .Output }}
{{- $moptions := options . }}
{{- $msubject := default $moptions.Subject (name .) }}
{{- $subject := printf "%s.%s.%s" $fsubject $ssubject $msubject }}

{{- if (eq $oname "Void") }}

type {{ name . }}Listener interface {
	On{{ name . }}(ctx context.Context, m *{{ name .Input }})
}

func Register{{ name . }}(s *nevent.Server, handler {{ name . }}Listener, opts ...nevent.ListenOption) (*nats.Subscription, error) {
	eh := func(ctx context.Context, m *nats.Msg) (interface{}, error) {
		data := new({{ name .Input }})
		err := proto.Unmarshal(m.Data, data)
		if err != nil {
			return nil, fmt.Errorf("unmarshal event: %w", err)
		}
		handler.On{{ name . }}(ctx, data)
		return nil, nil
	}
	return s.ListenEvent("{{ $subject }}", pb.EventType_Event, eh, opts...)
}

func (it *{{ $svc }}Client){{ name . }}(ctx context.Context, e *{{ name .Input }}, opts ...nevent.EmitOption) error {
	msg := nats.NewMsg("{{ $subject }}")
	data, err := proto.Marshal(e)
	if err != nil {
		return fmt.Errorf("event marshal error: %w", err)
	}
	msg.Data = data
	return it.nc.Emit(ctx, msg, opts...)
}

{{- else if (eq $oname "PushAck") }}
type {{ name . }}Listener interface {
	On{{ name . }}(ctx context.Context, m *{{ name .Input }}) (error)
}

func Register{{ name . }}(s *nevent.Server, handler {{ name . }}Listener, opts ...nevent.ListenOption) (*nats.Subscription, error) {
	eh := func(ctx context.Context, m *nats.Msg) (interface{}, error) {
		data := new({{ name .Input }})
		err := proto.Unmarshal(m.Data, data)
		if err != nil {
			return nil, fmt.Errorf("unmarshal event: %w", err)
		}
		err = handler.On{{ name . }}(ctx, data)
		return nil, err
	}
	return s.ListenEvent("{{ $subject }}", pb.EventType_Push, eh, opts...)
}

func (it *{{ $svc }}Client){{ name . }}(ctx context.Context, e *{{ name .Input }}, opts ...nevent.EmitOption) (*pb.PushAck, error) {
	msg := nats.NewMsg("{{ $subject }}")
	data, err := proto.Marshal(e)
	if err != nil {
		return nil, fmt.Errorf("ask marshal error", err)
	}
	msg.Data = data
	return it.nc.Push(ctx, msg, opts...)
}

func Ensure{{ name . }}Stream(str *nevent.Stream, opts ...nevent.StreamOption) (*nats.StreamInfo, error) {
	return str.EnsureStream("{{ $subject }}", opts...)
}
{{- else }}

type {{ name . }}Listener interface {
	On{{ name . }}(ctx context.Context, m *{{ name .Input }}) (*{{ name .Output }}, error)
}

func Register{{ name . }}(s *nevent.Server, handler {{ name . }}Listener, opts ...nevent.ListenOption) (*nats.Subscription, error) {
	eh := func(ctx context.Context, m *nats.Msg) (interface{}, error) {
		data := new({{ name .Input }})
		err := proto.Unmarshal(m.Data, data)
		if err != nil {
			return nil, fmt.Errorf("server unmarshal ask: %w", err)
		}
		resp, err := handler.On{{ name . }}(ctx, data)
		if err != nil {
			return nil, err
		}
		bs, err := proto.Marshal(resp)
		if err != nil {
			return nil, fmt.Errorf("server marshal answer: %w", err)
		}
		return bs, nil
	}
	return s.ListenEvent("{{ $subject }}", pb.EventType_Ask, eh, opts...)
}

func (it *{{ $svc }}Client){{ name . }}(ctx context.Context, e *{{ name .Input }}, opts ...nevent.EmitOption) (*{{ name .Output }}, error) {
	msg := nats.NewMsg("{{ $subject }}")
	data, err := proto.Marshal(e)
	if err != nil {
		return nil, fmt.Errorf("ask marshal error", err)
	}
	msg.Data = data
	resp, err := it.nc.Ask(ctx, msg, opts...)
	if err != nil {
		return nil, err
	}
	answer := new({{ name .Output }})
	err = proto.Unmarshal(resp, answer)
	if err != nil {
		return nil, fmt.Errorf("answer unmarshal error", err)
	}
	return answer, nil
}
{{- end }}

{{- end }}
{{- end }}
`
