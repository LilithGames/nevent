package main

const tmpl = `// This code was autogenerated from nevent, do not edit.
package {{ package . }}

import (
	"context"

	"github.com/LilithGames/nevent"
	"google.golang.org/grpc/metadata"
	"github.com/golang/protobuf/ptypes"
	pb "github.com/LilithGames/nevent/proto"
)
{{ range .Messages }}{{ if subject . }}
type {{ name . }}EventListener interface {
	On{{ name . }}Event(ctx context.Context, e *{{ name . }})
	OnError(err error)
}

func Register{{ name . }}Event(s *nevent.Server, handler {{ name . }}EventListener, opts ...nevent.ListenOption) {
	cb := func(subject string, reply string, e *pb.Event) {
		data := new({{ name . }})
		err := ptypes.UnmarshalAny(e.Data, data)
		if err != nil {
			handler.OnError(err)
			return
		}
		ctx := metadata.NewIncomingContext(context.TODO(), nevent.MDFromEvent(e))
		s.GetInterceptor()(ctx, subject, reply, data)
		handler.On{{ name . }}Event(ctx, data)
	}
	s.ListenEvent("{{ subject . }}", cb, opts...)
}

func Emit{{ name . }}(ctx context.Context, nc *nevent.Client, e *{{ name . }}, opts ...nevent.EmitOption) error {
	nc.GetInterceptor()(ctx, "{{ subject . }}", "emit", e)
	data, err := ptypes.MarshalAny(e)
	if err != nil {
		return err
	}
	md, _ := metadata.FromOutgoingContext(ctx)
	return nc.Emit("{{ subject . }}", nevent.NewEvent(md, data), opts...)
}

func (it *{{ name . }})Emit(ctx context.Context, nc *nevent.Client, opts ...nevent.EmitOption) error {
	return Emit{{ name . }}(ctx, nc, it, opts...)
}

{{ end }}{{ end }}
`
